@page "/createtodo"
@page "/createtodo/{id}"
@inject IToDoListService Service
@inject NavigationManager navManager
@using DigginDeep.Models

<h3>@(Id == null ? "Create New Task" : "Edit Task")</h3>

<Form ButtonText="@(Id == null ? "Create Task" : "Update Task")"
      todo="@todo" 
      OnValidSubmit="@(async () => await HandleSubmit())"
      FormName="todoForm" 
      TodoChanged="@HandleTodoChanged" />

@code {
    [Parameter]
    public string? Id { get; set; }

    private DigginDeep.Models.ToDoList todo = new DigginDeep.Models.ToDoList();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            todo = await Service.GetToDoList(int.Parse(Id));
        }
    }

    private void HandleTodoChanged(DigginDeep.Models.ToDoList updatedTodo)
    {
        todo = updatedTodo;
        StateHasChanged();
    }

    async Task HandleSubmit()
    {
        try 
        {
            if (!string.IsNullOrWhiteSpace(todo.Task) && !string.IsNullOrWhiteSpace(todo.Description))
            {
                if (string.IsNullOrEmpty(Id))
                {
                    await Service.AddToDoList(todo);
                }
                else
                {
                    await Service.UpdateToDoList(todo);
                }
                navManager.NavigateTo("/todo");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving task: {ex.Message}");
        }
    }
}