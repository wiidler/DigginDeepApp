@page "/todo/{id}"
@inject IJSRuntime JS

@inject Services.IToDoListService Service
@inject NavigationManager navManager
<h3>Task Details</h3>

@if(todo == null)
{
    <p>Loading...</p>
}
else
{
<div class="row justify content center m.3">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@todo.Task</h5>
                <p class="card-text">@todo.Description</p>
                <p class="card-text">Due Date: @todo.DueDate</p>
                <p class="card-text">Complete: @todo.IsComplete</p>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Mark As Completed</button>
                <a href="createtodo/@todo.Id">
                <button class="btn btn-secondary">Edit</button>
                </a>
                <button class="btn btn-danger" @onclick="DeleteTask">Delete</button>
            </div>
        </div>
    </div>
</div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    public DigginDeep.Models.ToDoList todo { get; set; } = new DigginDeep.Models.ToDoList();

    protected override async Task OnInitializedAsync()
    {
        todo = await Service.GetToDoList(int.Parse(Id));
    }

    protected async Task DeleteTask()
    {
        try
        {
            if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?"))
            {
                Console.WriteLine($"Deleting task with ID: {Id}"); // Add logging
                
                var result = await Service.DeleteToDoList(int.Parse(Id));
                if (result)
                {
                    Console.WriteLine("Delete successful"); // Add logging
                    await JS.InvokeVoidAsync("alert", "Task deleted successfully");
                    navManager.NavigateTo("/todo", true); // Force refresh
                }
                else
                {
                    Console.WriteLine("Delete failed"); // Add logging
                    await JS.InvokeVoidAsync("alert", "Failed to delete task");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Add logging
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}
