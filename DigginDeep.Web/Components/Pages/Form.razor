@using System.ComponentModel.DataAnnotations

<EditForm Model="@todo" OnValidSubmit="@OnValidSubmit" FormName="@FormName">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label>Task :</label>
        <div>
            <InputText @bind-Value="todo.Task" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.Task)" />
        </div>
    </div>
    
    <div class="form-group">
        <label>Description :</label>
        <div>
            <InputTextArea @bind-Value="todo.Description" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.Description)" />
        </div>
    </div>
    
    <div class="form-group">
        <label>Due Date & Time:</label>
        <div class="row">
            <div class="col-sm-3">
                <InputDate @bind-Value="todo.DueDate" class="form-control" />
                <ValidationMessage For="@(() => todo.DueDate)" />
            </div>
            <div class="col-sm-3">
                <InputText type="time" @bind-Value="timeString" class="form-control" />
            </div>
        </div>
    </div>
    
    <div class="form-group">
        <label>Is Complete :</label>
        <div>
            <select @bind="todo.IsComplete" class="form-control col-sm-3">
                <option value="false">No</option>
                <option value="true">Yes</option>
            </select>
            <ValidationMessage For="@(() => todo.IsComplete)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success">@ButtonText</button>
</EditForm>

@code {
    [Parameter]
    public DigginDeep.Models.ToDoList todo { get; set; } = new();

    [Parameter]
    public EventCallback<DigginDeep.Models.ToDoList> TodoChanged { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string FormName { get; set; } = "defaultForm";

    private string timeString
    {
        get => todo.DueDate.ToString("HH:mm");
        set => HandleTimeChanged(value).ConfigureAwait(false);
    }

    private async Task HandleTimeChanged(string value)
    {
        if (TimeOnly.TryParse(value, out var time))
        {
            todo.DueDate = todo.DueDate.Date.Add(time.ToTimeSpan());
            await NotifyPropertyChanged();
        }
    }

    private async Task HandlePropertyChanged(Action updateAction)
    {
        updateAction();
        await NotifyPropertyChanged();
    }

    private async Task NotifyPropertyChanged()
    {
        Console.WriteLine($"Notifying property changed: Task={todo.Task}, Description={todo.Description}");
        await TodoChanged.InvokeAsync(todo);
    }

    protected override void OnInitialized()
    {
        if (todo.DueDate == default)
        {
            todo.DueDate = DateTime.Now;
            NotifyPropertyChanged().ConfigureAwait(false);
        }
        base.OnInitialized();
    }
}