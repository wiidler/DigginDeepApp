<EditForm Model="@todo" OnValidSubmit="@OnValidSubmit" FormName="@FormName">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Task :</label>
        <div>
            <InputText @bind-Value="todo.Task" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.Task)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description :</label>
        <div>
            <InputTextArea @bind-Value="todo.Description" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.Description)" />
        </div>
    </div>
    <div class="form-group">
        <label>Due Date :</label>
        <div>
            <InputDate @bind-Value="todo.DueDate" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.DueDate)" />
        </div>
    </div>
    <div class="form-group">
        <label>Is Complete :</label>
        <div>
            <InputCheckbox @bind-Value="todo.IsComplete" @bind-Value:event="oninput" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => todo.IsComplete)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success">
        @ButtonText
    </button>
</EditForm>

@code {
    [Parameter]
    public DigginDeep.Models.ToDoList todo { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public string FormName { get; set; } = "defaultForm";
    [Parameter] 
    public EventCallback<DigginDeep.Models.ToDoList> TodoChanged { get; set; }
}